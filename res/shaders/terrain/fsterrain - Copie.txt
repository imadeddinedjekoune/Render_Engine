#version 440 core

out vec4 FragColor;

uniform sampler2D texture1;
uniform sampler2D texture2;
uniform sampler2D texture3;
uniform sampler2D texture4;
uniform sampler2D texture5;


in vec3 Normal;  
in vec3 FragPos;  
in vec2 TexCoord;  
in float visibility ;

uniform vec3 lightPos; 
uniform vec3 viewPos; 
uniform vec3 lightColor;
uniform int useLight ;
uniform vec3 skyColor ;


void main()
{
    vec4 result ;
    // si on utilise le lighting //
    if (useLight == 1)
    {
        // ambient
        float ambientStrength = 0.1;
        vec3 ambient = ambientStrength * lightColor;
  	
        // diffuse 
        vec3 norm = normalize(Normal);
        vec3 lightDir = normalize(lightPos - FragPos);
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = diff * lightColor;
    
        // specular
        float specularStrength = 1.0f;
        vec3 viewDir = normalize(viewPos - FragPos);
        vec3 reflectDir = reflect(-lightDir, norm);  
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
        vec3 specular = specularStrength * spec * lightColor;  
    
    
        vec4 test = texture(texture1, TexCoord); 
    
        if (test.a < 0.5)
        {
           discard;    
        }
        vec3 final = vec3(test.x,test.y,test.z);
        vec3 result_buff = (ambient + diffuse + specular) * final ;
        result = vec4(result_buff.x,result_buff.y,result_buff.z,1.0);

        
    }else
    {
        result = texture(texture1, TexCoord); 
        
        if (result.a < 0.5)
        {
           discard;    
        }
    }
    FragColor = mix (vec4(skyColor,1.0),result,visibility);
}