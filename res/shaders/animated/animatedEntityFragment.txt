#version 440 core

uniform sampler2D texture1;

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoord;
in float visibility ;

uniform vec3 lightPos; 
uniform vec3 viewPos; 
uniform vec3 lightColor;
uniform vec3 skyColor ;



void main(void){

	vec4 result ;
    // ambient
	float ambientStrength = 0.1;
	vec3 ambient = ambientStrength * lightColor;

	// diffuse 
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;

	// specular
	float specularStrength = 1.0f;
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = specularStrength * spec * lightColor;  


	vec4 test = texture(texture1, TexCoord); 

	if (test.a < 0.5)
	{
	   discard;    
	}
	vec3 final = vec3(test.x,test.y,test.z);
	vec3 result_buff = (ambient + diffuse + specular) * final ;
	result = vec4(result_buff.x,result_buff.y,result_buff.z,1.0);

    gl_FragColor = mix (vec4(skyColor,1.0),result,visibility);
	
}

